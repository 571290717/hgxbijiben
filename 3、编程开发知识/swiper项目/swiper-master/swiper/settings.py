"""
Django settings for swiper project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(BASE_DIR)
# /home/ty/Projects/Django/swiper



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'wdfa3^*f9g^rw%#jipc1+cil&zsm@uohn@a_))&)5j=x%k&+hh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'user',
    'social',
    'vip',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'common.middleware.AuthMiddleware',  # 用户验证中间件
    'common.middleware.LogicErrorMiddleware',  # 逻辑错误中间件
]

ROOT_URLCONF = 'swiper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, '../templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'swiper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    # 主
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'db_swiper',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': 3306,
    },
    # 从
    'slave': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'db_slave_swiper',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': 3306,
    },
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-Hans'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_FILES = (
    os.path.join(BASE_DIR, '../static')
)

# 上传的媒体文件的保存路径
MEDIA_ROOT = 'medias'

# Cache 缓存配置
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'  # 本地缓存
    }
}

# redis config
REDIS = {
    'Master': {
        'host': '127.0.0.1',
        'port': 6379,
        'db': 1,
    },
    'Slave': {
        'host': '127.0.0.1',
        'port': 6379,
        'db': 1,
    }
}
# CACHE = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': [
#             'redis://127.0.0.1: 6379/1',
#             'redis://127.0.0.1: 6379/2',
#         ],
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#             'PASSWORD': '123456',
#             # 连接池设置
#             'CONNECTION_POOL_KWARGS': {
#                 'max_connections': 100,
#                 'retry_on_timeout': True,
#             },
#             'SERIALIZER': 'django_redis.serializer.json.JSONSerializer',  # json 序列化
#             'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressors',  # zlib 压缩
#         }
#     }
# }

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    # 格式化器
    'formatters': {
        # 简易格式
        'simple': {
            'format': '%(asctime)s %(module)s.%(funcName)s: %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%s',
        },
        # 详细信息
        'verbose': {
            'format': '%(asctime)s %(levelname)s [%(process)d-%(threadName)s] %(module)s.%(funcName)s line %(lineno)d: %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        }
    },
    # 处理器
    'handlers': {
        # django 默认输出
        'console': {
            'class': 'logging.StreamHandler',  # 流式处理
            'level': 'DEBUG' if DEBUG else 'WARNING'
        },
        'info': {
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 按时间回滚文件处理方式
            'filename': '{}/logs/info.log'.format(BASE_DIR),  # 日志保存路径
            'when': 'D',  # 按天切割日志
            'backupCount': 30,  # 日志备份时间
            'formatter': 'simple',
            'level': 'INFO',
        },
        'error': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '{}/logs/errors.log'.format(BASE_DIR),
            # 'filename': f'{BASE_DIR}/logs/errors.log',
            'when': 'W0',  # 按周切割
            'backupCount': 4,
            'formatter': 'verbose',
            'level': 'WARNING',
        }
    },
    # Logger配置
    'loggers': {
        # django默认
        'django': {
            'handlers': ['console'],
        },
        'inf': {
            'handlers': ['info'],
            'propagate': True,
            'level': 'INFO',
        },
        'err': {
            'handlers': ['error'],
            'propagate': True,
            'level': 'WARNING',
        }
    }
}

